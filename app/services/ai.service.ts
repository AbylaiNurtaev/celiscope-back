import dotenv from 'dotenv'

dotenv.config()

type ChatMessage = {
  role: 'system' | 'user' | 'assistant'
  content: string
}

type ChatResponse = {
  text: string
}

class AIService {
  private readonly apiKey: string
  private readonly apiBaseUrl: string
  private readonly model: string

  constructor() {
    this.apiKey = process.env.DEEPSEEK_API_KEY
    this.apiBaseUrl = process.env.DEEPSEEK_API_BASE || 'https://api.deepseek.com'
    this.model = process.env.DEEPSEEK_MODEL || 'deepseek-chat'

    if (!this.apiKey) {
      throw new Error('DEEPSEEK_API_KEY is not set')
    }
  }

  private stripMarkdownFormatting(text: string): string {
    if (!text) return ''
    let cleaned = text
      // remove fenced code blocks
      .replace(/```[\s\S]*?```/g, '')
      // inline code
      .replace(/`([^`]*)`/g, '$1')
      // bold/italic
      .replace(/\*\*([^*]+)\*\*/g, '$1')
      .replace(/\*([^*]+)\*/g, '$1')
      .replace(/_([^_]+)_/g, '$1')
      // headings
      .replace(/^#{1,6}\s+/gm, '')
      // list bullets
      .replace(/^\s*[-*‚Ä¢¬∑‚Ä£‚àô‚ó¶‚úîÔ∏è‚úì]\s+/gm, '')
      // numbered lists
      .replace(/^\s*\d+[).]\s+/gm, '')
      // stray bullet-like symbols
      .replace(/[‚Ä¢‚óÜ‚ó¶‚ñ™Ô∏é‚ñ∏‚ñ∫‚Äì‚Äî]+/g, ' ')
      // collapse spaces at EOL
      .replace(/[ \t]+$/gm, '')
      // collapse too many newlines
      .replace(/\n{3,}/g, '\n\n')

    return cleaned.trim()
  }

  private sanitizeListLines(lines: string[]): string[] {
    return lines
      .map(s => s
        .replace(/^[-*‚Ä¢¬∑‚Ä£‚àô‚ó¶‚úîÔ∏è‚úì\d).\s]+/, '')
        .replace(/\s{2,}/g, ' ')
        .trim()
      )
      .filter(Boolean)
  }

  private async chat(messages: ChatMessage[], systemPrompt?: string): Promise<ChatResponse> {
    const fullMessages: ChatMessage[] = systemPrompt
      ? [{ role: 'system', content: systemPrompt }, ...messages]
      : messages

    const response = await fetch(`${this.apiBaseUrl}/chat/completions`, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
        Authorization: `Bearer ${this.apiKey}`
      },
      body: JSON.stringify({
        model: this.model,
        messages: fullMessages,
        temperature: 0.3
      })
    })

    if (!response.ok) {
      const errorText = await response.text().catch(() => '')
      throw new Error(`DeepSeek error ${response.status}: ${errorText}`)
    }

    const data: any = await response.json()
    const content: string = data?.choices?.[0]?.message?.content || ''
    return { text: this.stripMarkdownFormatting(content) }
  }

  private async chatRaw(messages: ChatMessage[], systemPrompt?: string): Promise<string> {
    const fullMessages: ChatMessage[] = systemPrompt
      ? [{ role: 'system', content: systemPrompt }, ...messages]
      : messages

    const response = await fetch(`${this.apiBaseUrl}/chat/completions`, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
        Authorization: `Bearer ${this.apiKey}`
      },
      body: JSON.stringify({
        model: this.model,
        messages: fullMessages,
        temperature: 0.3
      })
    })

    if (!response.ok) {
      const errorText = await response.text().catch(() => '')
      throw new Error(`DeepSeek error ${response.status}: ${errorText}`)
    }

    const data: any = await response.json()
    return data?.choices?.[0]?.message?.content || ''
  }

  async generateGoalDescription(input: { title: string; context?: string }): Promise<string> {
    const system = '–¢—ã –ø–æ–º–æ—â–Ω–∏–∫ –ø–æ —Ü–µ–ª—è–º. –ü–∏—à–∏ –∫—Ä–∞—Ç–∫–æ, —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–æ –∏ –ø–æ –¥–µ–ª—É.'
    const prompt = `–°—Ñ–æ—Ä–º–∏—Ä—É–π –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ —Ü–µ–ª–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ –∑–∞–≥–æ–ª–æ–≤–∫–∞ –∏ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞.
–ó–∞–≥–æ–ª–æ–≤–æ–∫: ${input.title}
–ö–æ–Ω—Ç–µ–∫—Å—Ç: ${input.context || '‚Äî'}
–í—ã–≤–µ–¥–∏ 2-3 –∞–±–∑–∞—Ü–∞.`
    const { text } = await this.chat([{ role: 'user', content: prompt }], system)
    return this.stripMarkdownFormatting(text)
  }

  async generateTasks(input: { title: string; context?: string; maxItems?: number; deadline?: string }): Promise<Array<{ description: string; deadline?: string }>> {
    const max = input.maxItems || 6
    const timeframe = input.deadline || '–Ω–µ –∑–∞–¥–∞–Ω'
    const todayIso = new Date().toISOString()
    const system = '–¢—ã –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫. –í–µ—Ä–Ω–∏ —Å—Ç—Ä–æ–≥–æ JSON –±–µ–∑ markdown –∏ —Ç–µ–∫—Å—Ç–∞ –≤–æ–∫—Ä—É–≥.'
    const prompt = `–°–≥–µ–Ω–µ—Ä–∏—Ä—É–π –¥–æ ${max} –±–∞–∑–æ–≤—ã—Ö –∑–∞–¥–∞—á –¥–ª—è –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è —Ü–µ–ª–∏.
–¶–µ–ª—å: ${input.title}
–ö–æ–Ω—Ç–µ–∫—Å—Ç: ${input.context || '‚Äî'}
–°—Ä–æ–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –≤—Å–µ–π —Ü–µ–ª–∏: ${timeframe}
–°–µ–≥–æ–¥–Ω—è—à–Ω—è—è –¥–∞—Ç–∞ (UTC): ${todayIso}
–¢—Ä–µ–±–æ–≤–∞–Ω–∏–µ –ø–æ —Å—Ä–æ–∫–∞–º –∑–∞–¥–∞—á: –∫–∞–∂–¥–æ–π –∑–∞–¥–∞—á–µ –ø—Ä–∏—Å–≤–æ–π —Å–≤–æ–π –¥–µ–¥–ª–∞–π–Ω –≤ —Ñ–æ—Ä–º–∞—Ç–µ ISO-8601 (–Ω–∞–ø—Ä–∏–º–µ—Ä, 2025-03-31T00:00:00.000Z), —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–∏–≤ –¥–µ–¥–ª–∞–π–Ω—ã —Ä–∞–≤–Ω–æ–º–µ—Ä–Ω–æ –æ—Ç —Å–µ–≥–æ–¥–Ω—è—à–Ω–µ–≥–æ –¥–Ω—è –ø–æ –≤—Å–µ–º—É —Å—Ä–æ–∫—É. –î–µ–¥–ª–∞–π–Ω—ã –∑–∞–¥–∞—á –¥–æ–ª–∂–Ω—ã –æ—Ç–ª–∏—á–∞—Ç—å—Å—è –¥—Ä—É–≥ –æ—Ç –¥—Ä—É–≥–∞ –∏ –∏–¥—Ç–∏ –ø–æ –≤—Ä–µ–º–µ–Ω–∏ –≤–ø–µ—Ä—ë–¥.
–§–æ—Ä–º–∞—Ç –æ—Ç–≤–µ—Ç–∞: –º–∞—Å—Å–∏–≤ JSON –≤–∏–¥–∞ [{"description":"—Ç–µ–∫—Å—Ç –∑–∞–¥–∞—á–∏","deadline":"ISO-8601"}].`

    // –ò—Å–ø–æ–ª—å–∑—É–µ–º raw, —á—Ç–æ–±—ã –Ω–µ –ø–æ—Ç–µ—Ä—è—Ç—å JSON –≤ –∫–æ–¥-–±–ª–æ–∫–∞—Ö
    const raw = await this.chatRaw([{ role: 'user', content: prompt }], system)

    const parsed = this.tryExtractJson<any>(raw)
    if (Array.isArray(parsed)) {
      const cleaned = parsed
        .slice(0, max)
        .map((item: any) => ({
          description: String(item?.description || '').trim(),
          deadline: item?.deadline ? String(item.deadline).trim() : undefined
        }))
        .filter(t => t.description.length > 0)
      if (cleaned.length) return cleaned
    }

    // –§–æ–ª–±—ç–∫: –≤–µ—Ä–Ω—ë–º —Ç–æ–ª—å–∫–æ –æ–ø–∏—Å–∞–Ω–∏—è –±–µ–∑ –¥–µ–¥–ª–∞–π–Ω–æ–≤
    const lines = raw.split('\n')
    const items = this.sanitizeListLines(lines).slice(0, max)
    return items.map(description => ({ description, deadline: undefined }))
  }

  async generateMotivation(input: { completed: number; total: number }): Promise<string> {
    const system = '–¢—ã –º–æ—Ç–∏–≤–∞—Ç–æ—Ä. –ü–∏—à–∏ –¥—Ä—É–∂–µ–ª—é–±–Ω–æ –∏ –∫—Ä–∞—Ç–∫–æ, 1-2 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è.'
    const prompt = `–°–≥–µ–Ω–µ—Ä–∏—Ä—É–π –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–æ–µ –º–æ—Ç–∏–≤–∞—Ü–∏–æ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ.
–í—ã–ø–æ–ª–Ω–µ–Ω–æ: ${input.completed} –∏–∑ ${input.total}.
–ü—Ä–∏–º–µ—Ä —Å—Ç–∏–ª—è: "–û—Ç–ª–∏—á–Ω–æ, —Ç—ã –∑–∞–≤–µ—Ä—à–∏–ª ${input.completed} –∏–∑ ${input.total} –∑–∞–¥–∞—á, –æ—Å—Ç–∞–ª–æ—Å—å –Ω–µ–º–Ω–æ–≥–æ ‚Äî —Ç–∞–∫ –¥–µ—Ä–∂–∞—Ç—å!"`
    const { text } = await this.chat([{ role: 'user', content: prompt }], system)
    return this.stripMarkdownFormatting(text)
  }

  private condenseWeekly(goalsSummary: any[], completedGoals?: any[]): string {
    const lines: string[] = []
    if (Array.isArray(goalsSummary)) {
      goalsSummary.slice(0, 10).forEach((g: any, idx: number) => {
        const title = (g?.title || '').toString().trim()
        const createdAt = g?.createdAt || ''
        const deadlineAt = g?.deadlineAt || ''
        const timeLeftDays = typeof g?.timeLeftDays === 'number' ? g.timeLeftDays : ''
        const timeLeftHuman = g?.timeLeftHuman || ''
        const completed = g?.completed ?? ''
        const total = g?.total ?? ''
        const done = Array.isArray(g?.completedTasks)
          ? g.completedTasks.slice(0, 5).map((t: any) => `${t?.description || ''} (${t?.dateCompleted || ''})`).join('; ')
          : ''
        const pending = Array.isArray(g?.pendingTasks)
          ? g.pendingTasks.slice(0, 5).map((t: any) => `${t?.description || ''} (–¥–æ ${t?.deadline || ''})`).join('; ')
          : ''
        lines.push(`${idx + 1}. ${title} [${completed}/${total}] –æ—Å—Ç–∞–ª–æ—Å—å: ${timeLeftHuman || timeLeftDays + ' –¥–Ω.'} | —Å–æ–∑–¥–∞–Ω–∞: ${createdAt}, –¥–µ–¥–ª–∞–π–Ω: ${deadlineAt}${done ? ` | –≤—ã–ø–æ–ª–Ω–µ–Ω–æ: ${done}` : ''}${pending ? ` | –≤ —Ä–∞–±–æ—Ç–µ: ${pending}` : ''}`)
      })
    }
    if (Array.isArray(completedGoals) && completedGoals.length) {
      const cg = completedGoals.slice(0, 10).map((c: any) => `${c?.title || ''} (–∑–∞–≤–µ—Ä—à–µ–Ω–∞ ${c?.completedAt || ''}, —Å–æ–∑–¥–∞–Ω–∞ ${c?.createdAt || ''})`).join('; ')
      lines.push(`–ó–∞–≤–µ—Ä—à—ë–Ω–Ω—ã–µ —Ü–µ–ª–∏: ${cg}`)
    }
    return lines.join('\n')
  }

  async generateWeeklyReport(input: { userName?: string; goalsSummary: any[]; completedGoals?: any[] }): Promise<string> {
    const todayIso = new Date().toISOString()
    const system = [
      '–¢—ã –∞–Ω–∞–ª–∏—Ç–∏–∫ –∏ –º–æ—Ç–∏–≤–∏—Ä—É—é—â–∏–π –∫–æ—É—á. –ü–∏—à–∏ –≤ —Å—Ç–∏–ª–µ –¥–∞–Ω–Ω–æ–≥–æ –ø—Ä–∏–º–µ—Ä–∞:',
      '"–ü—Ä–∏–≤–µ—Ç üëã\n–ü–æ–¥–≥–æ—Ç–æ–≤–∏–ª –¥–ª—è —Ç–µ–±—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∑–∞ —ç—Ç—É –Ω–µ–¥–µ–ª—é - —Ç—ã –ø—Ä–æ—Å—Ç–æ –º–∞—à–∏–Ω–∞ –ø—Ä–æ–¥—É–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏!\n\n‚úÖ –ó–∞–¥–∞—á–∏: ...\nüìà –ü—Ä–æ–¥—É–∫—Ç–∏–≤–Ω–æ—Å—Ç—å: ...\nüèÜ –ó–∞–≤–µ—Ä—à–µ–Ω–æ: ...\nüéØ –ö–ª—é—á–µ–≤—ã–µ —Ü–µ–ª–∏ –≤ —Ä–∞–±–æ—Ç–µ: ...\n‚ö°Ô∏è ...\n\nüí™ –ú–æ—Ç–∏–≤–∞—Ü–∏—è: ...\n\nüéØ –ò–ò-—Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è: \"...\""',
      '–°–æ—Ö—Ä–∞–Ω—è–π —Å—Ç—Ä—É–∫—Ç—É—Ä—É –∏ —Ç–æ–Ω: –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ, –±–ª–æ–∫ —Å –∏–∫–æ–Ω–∫–∞–º–∏-—Å—Ç—Ä–æ–∫–∞–º–∏, –º–æ—Ç–∏–≤–∞—Ü–∏—è, —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è. –ë–æ–ª—å—à–µ —Å–º–∞–π–ª–∏–∫–æ–≤, –±–µ–∑ markdown-—Ä–∞–∑–º–µ—Ç–∫–∏ –∏ —Å–ø–∏—Å–æ—á–Ω—ã—Ö –º–∞—Ä–∫–µ—Ä–æ–≤.'
    ].join(' ')

    const condensed = this.condenseWeekly(input.goalsSummary || [], input.completedGoals || [])
    const prompt = `–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: ${input.userName || '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å'}\n–°–µ–≥–æ–¥–Ω—è: ${todayIso}\n–î–∞–Ω–Ω—ã–µ –∑–∞ –Ω–µ–¥–µ–ª—é:\n${condensed}\n–°—Ñ–æ—Ä–º–∏—Ä—É–π –æ—Ç—á—ë—Ç –≤ —Å—Ç–∏–ª–µ –ø—Ä–∏–º–µ—Ä–∞ –≤—ã—à–µ: –∫–æ—Ä–æ—Ç–∫–æ, –ø–æ –¥–µ–ª—É, —Å –º–Ω–æ–∂–µ—Å—Ç–≤–æ–º —Å–º–∞–π–ª–∏–∫–æ–≤. –£–ø–æ–º–∏–Ω–∞–π —á–∏—Å–ª–∞ –∏ —Å—Ä–æ–∫–∏ –ª–∞–∫–æ–Ω–∏—á–Ω–æ.`
    const { text } = await this.chat([{ role: 'user', content: prompt }], system)
    return this.stripMarkdownFormatting(text)
  }

  async generateTemplates(): Promise<string[]> {
    const system = '–¢—ã –±–∏–±–ª–∏–æ—Ç–µ–∫–∞—Ä—å —Ü–µ–ª–µ–π. –í–µ—Ä–Ω–∏ —Ç–æ–ª—å–∫–æ —Å–ø–∏—Å–æ–∫ —à–∞–±–ª–æ–Ω–Ω—ã—Ö —Ü–µ–ª–µ–π, –ø–æ –æ–¥–Ω–æ–π –Ω–∞ —Å—Ç—Ä–æ–∫—É.'
    const prompt = '–°–≥–µ–Ω–µ—Ä–∏—Ä—É–π 10 —à–∞–±–ª–æ–Ω–Ω—ã—Ö —Ü–µ–ª–µ–π –¥–ª—è –ª–∏—á–Ω–æ–π –ø—Ä–æ–¥—É–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –∏ —Å–∞–º–æ—Ä–∞–∑–≤–∏—Ç–∏—è.'
    const { text } = await this.chat([{ role: 'user', content: prompt }], system)
    return this.sanitizeListLines(text.split('\n'))
  }

  async generateGoalFromTemplate(input: { template: string; deadline: string; maxItems?: number; context?: string }): Promise<{ title: string; description: string; tasks: Array<{ description: string; deadline?: string }> }> {
    const title = input.template?.toString().trim()
    const todayIso = new Date().toISOString()

    // 1) –û–ø–∏—Å–∞–Ω–∏–µ —Ü–µ–ª–∏ –∏–∑ —à–∞–±–ª–æ–Ω–∞
    const sysDesc = '–¢—ã –ø–æ–º–æ—â–Ω–∏–∫ –ø–æ —Ü–µ–ª—è–º. –°—Ñ–æ—Ä–º–∏—Ä—É–π –∫—Ä–∞—Ç–∫–æ–µ, –º–æ—Ç–∏–≤–∏—Ä—É—é—â–µ–µ –∏ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ —Ü–µ–ª–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ —à–∞–±–ª–æ–Ω–∞.'
    const promptDesc = `–®–∞–±–ª–æ–Ω —Ü–µ–ª–∏: ${title}\n–ö–æ–Ω—Ç–µ–∫—Å—Ç: ${input.context || '‚Äî'}\n–°—Ä–æ–∫ —Ü–µ–ª–∏: ${input.deadline}\n–°–µ–≥–æ–¥–Ω—è—à–Ω—è—è –¥–∞—Ç–∞ (UTC): ${todayIso}\n–í—ã–≤–µ–¥–∏ 2-3 –∞–±–∑–∞—Ü–∞ –±–µ–∑ —Å–ø–∏—Å–∫–æ–≤.`
    const { text: description } = await this.chat([{ role: 'user', content: promptDesc }], sysDesc)

    // 2) –ó–∞–¥–∞—á–∏ —Å –¥–µ–¥–ª–∞–π–Ω–∞–º–∏ –ø–æ–¥ —Å—Ä–æ–∫ —Ü–µ–ª–∏
    const tasks = await this.generateTasks({
      title,
      context: description,
      maxItems: input.maxItems || 6,
      deadline: input.deadline
    })

    return { title, description: this.stripMarkdownFormatting(description), tasks }
  }
  private condenseGoals(goals: any[]): string {
    if (!Array.isArray(goals)) return '‚Äî'
    return goals
      .slice(0, 10)
      .map((g, idx) => {
        const title = (g?.title || '').toString().trim()
        const description = (g?.description || '').toString().replace(/\n+/g, ' ').trim()
        const progress = g?.progress ? `(${g.progress.completed||0}/${g.progress.total||0})` : ''
        const subs = Array.isArray(g?.subGoals)
          ? g.subGoals.slice(0, 5).map((s: any) => `${s?.done ? '[x]' : '[ ]'} ${s?.description || ''}`.trim()).join('; ')
          : ''
        return `${idx+1}. ${title} ${progress} ‚Äî ${description}${subs ? ` | –ó–∞–¥–∞—á–∏: ${subs}` : ''}`.trim()
      })
      .join('\n')
  }

  private tryExtractJson<T = any>(text: string): T | null {
    if (!text) return null
    const fenced = text.match(/```(?:json)?\s*([\s\S]*?)```/i)
    if (fenced && fenced[1]) {
      const candidate = fenced[1].trim()
      try { return JSON.parse(candidate) } catch {}
    }
    const arrayMatch = text.match(/\[[\s\S]*\]/)
    if (arrayMatch) {
      try { return JSON.parse(arrayMatch[0]) } catch {}
    }
    const objectMatch = text.match(/\{[\s\S]*\}/)
    if (objectMatch) {
      try { return JSON.parse(objectMatch[0]) } catch {}
    }
    return null
  }

  async chatAboutGoals(input: { question: string; context?: any; history?: Array<{ role: 'user' | 'assistant'; content: string }> }): Promise<{ text: string; selectedGoalTitle?: string }> {
    const goals = input?.context?.goals || []
    const goalsCondensed = this.condenseGoals(goals)

    const system = [
      '–¢—ã –∫–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç –ø–æ —Ü–µ–ª—è–º. –£ —Ç–µ–±—è –µ—Å—Ç—å –∏—Å—Ç–æ—Ä–∏—è –¥–∏–∞–ª–æ–≥–∞. –£—á–∏—Ç—ã–≤–∞–π –µ—ë –ø—Ä–∏ –æ—Ç–≤–µ—Ç–µ.',
      '–°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏ –û–î–ù–£ –Ω–∞–∏–±–æ–ª–µ–µ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—É—é —Ü–µ–ª—å –∏–∑ —Å–ø–∏—Å–∫–∞ –ø–æ —Å–º—ã—Å–ª–æ–≤–æ–π –±–ª–∏–∑–æ—Å—Ç–∏ –∫ —Ç–µ–∫—É—â–µ–º—É –∑–∞–ø—Ä–æ—Å—É –∏ –∏—Å—Ç–æ—Ä–∏–∏.',
      '–ó–∞—Ç–µ–º –¥–∞–π –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π –æ—Ç–≤–µ—Ç —Ç–æ–ª—å–∫–æ –ø–æ –≤—ã–±—Ä–∞–Ω–Ω–æ–π —Ü–µ–ª–∏ —Å –ø—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏–º–∏ —à–∞–≥–∞–º–∏.',
      '–û—Ç–≤–µ—á–∞–π —Å—Ç—Ä–æ–≥–æ –≤ JSON: {"selectedGoalTitle": string, "answer": string}. –ë–µ–∑ markdown –∏ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤.'
    ].join(' ')

    const history = Array.isArray(input?.history) ? input.history.slice(-10) : []
    const historyMessages: ChatMessage[] = history.map(h => ({ role: h.role, content: this.stripMarkdownFormatting(h.content) }))

    const currentUserContent = `–í–æ–ø—Ä–æ—Å: ${input.question}\n–°–ø–∏—Å–æ–∫ —Ü–µ–ª–µ–π:\n${goalsCondensed}`
    const messages: ChatMessage[] = [...historyMessages, { role: 'user', content: currentUserContent }]

    const { text } = await this.chat(messages, system)

    const data = this.tryExtractJson<{ selectedGoalTitle?: string; answer?: string }>(text)
    if (data?.answer) {
      return { text: this.stripMarkdownFormatting(data.answer), selectedGoalTitle: data.selectedGoalTitle }
    }
    return { text: this.stripMarkdownFormatting(text) }
  }

  async generateTriggerMessage(input: {
    type: 'HALF_DONE' | 'TASK_OVERDUE' | 'FIRST_TASK_DONE' | 'GOAL_OVERDUE' | 'GOAL_COMPLETED'
    goalTitle?: string
    taskTitle?: string
    totalTasks?: number
    completedTasks?: number
    userName?: string
  }): Promise<string> {
    const todayIso = new Date().toISOString()
    const system = '–¢—ã –∫–æ—É—á. –í–µ—Ä–Ω–∏ –æ–¥–Ω–æ –∫–æ—Ä–æ—Ç–∫–æ–µ –º–æ—Ç–∏–≤–∏—Ä—É—é—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —ç–º–æ–¥–∑–∏. –ë–µ–∑ markdown –∏ –±–µ–∑ —Å–ø–∏—Å–∫–æ–≤.'

    let prompt = `–°–µ–≥–æ–¥–Ω—è: ${todayIso}\n–ò–º—è: ${input.userName || ''}\n`
    switch (input.type) {
      case 'HALF_DONE':
        prompt += `–°–≥–µ–Ω–µ—Ä–∏—Ä—É–π —Ñ—Ä–∞–∑—É –ø–æ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—é –ø–æ–ª–æ–≤–∏–Ω—ã –∑–∞–¥–∞—á: –≤—ã–ø–æ–ª–Ω–µ–Ω–æ ${input.completedTasks}/${input.totalTasks}. –¢–æ–Ω: –≤–¥–æ—Ö–Ω–æ–≤–ª—è—é—â–∏–π.`
        break
      case 'TASK_OVERDUE':
        prompt += `–°–≥–µ–Ω–µ—Ä–∏—Ä—É–π –º—è–≥–∫–æ–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ: –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–∞ –∑–∞–¥–∞—á–∞ "${input.taskTitle || ''}" –≤ —Ü–µ–ª–∏ "${input.goalTitle || ''}". –ü—Ä–µ–¥–ª–æ–∂–∏ –Ω–∞—á–∞—Ç—å —Å –º–∞–ª–æ–≥–æ.`
        break
      case 'FIRST_TASK_DONE':
        prompt += `–°–≥–µ–Ω–µ—Ä–∏—Ä—É–π –æ–±–Ω–∞–¥—ë–∂–∏–≤–∞—é—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ: –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ –ø–µ—Ä–≤–∞—è –∑–∞–¥–∞—á–∞ –≤ —Ü–µ–ª–∏ "${input.goalTitle || ''}".`
        break
      case 'GOAL_OVERDUE':
        prompt += `–°–≥–µ–Ω–µ—Ä–∏—Ä—É–π –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ: —Ü–µ–ª—å "${input.goalTitle || ''}" –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–∞. –ü—Ä–µ–¥–ª–æ–∂–∏ —Å–∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –ø–ª–∞–Ω.`
        break
      case 'GOAL_COMPLETED':
        prompt += `–°–≥–µ–Ω–µ—Ä–∏—Ä—É–π –ø–æ–∑–¥—Ä–∞–≤–ª–µ–Ω–∏–µ —Å –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–µ–º —Ü–µ–ª–∏ "${input.goalTitle || ''}". –ü—Ä–µ–¥–ª–æ–∂–∏ –ø–æ—Ä–∞–¥–æ–≤–∞—Ç—å —Å–µ–±—è –Ω–∞–≥—Ä–∞–¥–æ–π.`
        break
    }

    const { text } = await this.chat([{ role: 'user', content: prompt }], system)
    return this.stripMarkdownFormatting(text)
  }
}

export const aiService = new AIService()


